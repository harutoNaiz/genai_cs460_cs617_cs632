Here are the 5 multiple choice questions on Understanding Complexity: Time and Space Analysis:

**Question 1**
What does the Big O notation represent in time complexity analysis?
a. The exact number of operations performed
b. The maximum number of operations performed
c. The upper bound of operations performed
d. The average number of operations performed

**Correct answer: c. The upper bound of operations performed**
**Subtopic: Big O Notation**
**What in that subtopic exactly: Definition of Big O**
**Difficulty: e**

**Question 2**
Which of the following time complexities represents a linear relationship between the input size and the number of operations performed?
a. O(log n)
b. O(n)
c. O(n^2)
d. O(2^n)

**Correct answer: b. O(n)**
**Subtopic: Time Complexity**
**What in that subtopic exactly: Linear Time Complexity**
**Difficulty: m**

**Question 3**
A algorithm has a time complexity of O(n log n). Which of the following statements is true?
a. The algorithm has a linear relationship between the input size and the number of operations performed
b. The algorithm has an exponential relationship between the input size and the number of operations performed
c. The algorithm has a polynomial relationship between the input size and the number of operations performed
d. The algorithm has a logarithmic relationship between the input size and the number of operations performed

**Correct answer: c. The algorithm has a polynomial relationship between the input size and the number of operations performed**
**Subtopic: Time Complexity**
**What in that subtopic exactly: Non-Linear Time Complexity**
**Difficulty: m**

**Question 4**
What is the time complexity of the following recursive function: T(n) = 2T(n/2) + O(n)?
a. O(n)
b. O(n log n)
c. O(log n)
d. O(2^n)

**Correct answer: b. O(n log n)**
**Subtopic: Recurrence Relations**
**What in that subtopic exactly: Solving Recurrence Relations**
**Difficulty: h**

**Question 5**
Given a recursive function with the following recurrence relation: T(n) = T(n-1) + T(n-2), what is the time complexity of the function?
a. O(2^n)
b. O(n^2)
c. O(n log n)
d. O(n)

**Correct answer: a. O(2^n)**
**Subtopic: Recurrence Relations**
**What in that subtopic exactly: Solving Recurrence Relations with Dynamic Programming**
**Difficulty: h**
Here are five multiple-choice questions on 1_Foundations of Data Structures under Arrays and Linked Lists:

**Question 1**
Which of the following is a characteristic of an array?
a. Elements are stored in a non-contiguous manner.
b. Elements are stored in a contiguous manner.
c. Elements can be of different data types.
d. Elements can be inserted or deleted at any position easily.

**Correct answer: b. Elements are stored in a contiguous manner.**
**Subtopic: Arrays**
**What in that subtopic exactly: Characteristics of Arrays**
**Difficulty: e**

**Question 2**
What is the time complexity of accessing an element at a given index in an array?
a. O(n)
b. O(log n)
c. O(1)
d. O(n log n)

**Correct answer: c. O(1)**
**Subtopic: Arrays**
**What in that subtopic exactly: Array Operations**
**Difficulty: m**

**Question 3**
In a singly linked list, which of the following operations can be performed in O(1) time?
a. Insertion at the beginning
b. Deletion at the end
c. Insertion at a given position
d. Deletion at a given position

**Correct answer: a. Insertion at the beginning**
**Subtopic: Linked Lists**
**What in that subtopic exactly: Operations on Linked Lists**
**Difficulty: m**

**Question 4**
What is the primary advantage of using a linked list over an array?
a. Faster access time
b. Efficient use of memory
c. Easier implementation
d. Better cache performance

**Correct answer: b. Efficient use of memory**
**Subtopic: Linked Lists**
**What in that subtopic exactly: Advantages of Linked Lists**
**Difficulty: h**

**Question 5**
Consider a scenario where you need to implement a dynamic array that can grow or shrink in size as elements are added or removed. Which of the following data structures would be most suitable for this purpose?
a. Singly linked list
b. Doubly linked list
c. Array
d. Dynamic array with a resizing strategy

**Correct answer: d. Dynamic array with a resizing strategy**
**Subtopic: Dynamic Arrays**
**What in that subtopic exactly: Implementing Dynamic Arrays**
**Difficulty: h**
Here are five multiple-choice questions on Foundations of Data Structures under Stacks and Queues:

**Question 1**
What is the primary operation in a stack?
a. Insertion
b. Deletion
c. Traversal
d. Searching

**Correct answer: b. Deletion**
**Subtopic: Stacks**
**What in that subtopic exactly: Operations on Stacks**
**Difficulty: e**

**Question 2**
Which of the following is an example of a real-life scenario where a queue data structure is used?
a. A binary search tree
b. A hash table
c. Print Job Processing
d. A graph traversal

**Correct answer: c. Print Job Processing**
**Subtopic: Queues**
**What in that subtopic exactly: Applications of Queues**
**Difficulty: m**

**Question 3**
What is the time complexity of enqueue and dequeue operations in a queue implemented using a linked list?
a. O(1) and O(n)
b. O(n) and O(1)
c. O(1) and O(1)
d. O(n) and O(n)

**Correct answer: c. O(1) and O(1)**
**Subtopic: Implementation of Queues**
**What in that subtopic exactly: Time Complexity of Queue Operations**
**Difficulty: m**

**Question 4**
Consider a stack of integers, where we push elements 1, 2, and 3 in that order. What is the order in which the elements will be popped out?
a. 3, 2, 1
b. 1, 2, 3
c. 2, 3, 1
d. 1, 3, 2

**Correct answer: a. 3, 2, 1**
**Subtopic: Stacks**
**What in that subtopic exactly: LIFO Property of Stacks**
**Difficulty: h**

**Question 5**
A queue is implemented using an array of size n. What is the maximum number of elements that can be enqueued in the worst case?
a. n
b. n-1
c. n/2
d. 2n

**Correct answer: b. n-1**
**Subtopic: Implementation of Queues**
**What in that subtopic exactly: Capacity of Queue**
**Difficulty: h**
Here are five multiple choice questions on Hashing: Efficient Data Retrieval using Hash Tables, with increasing difficulty:

**Question 1**
What is the main purpose of a hash function in a hash table?
a. To retrieve data from the table
b. To store data in the table
c. To map a large input space to a smaller output space
d. To sort the data in the table

**Correct answer: c. To map a large input space to a smaller output space**
**Subtopic: Hash Functions**
**What in that subtopic exactly: Definition of a Hash Function**
**Difficulty: e**

**Question 2**
What happens when two keys hash to the same index in a hash table?
a. The data is lost
b. The hash function is re-run
c. A collision occurs
d. The table is resized

**Correct answer: c. A collision occurs**
**Subtopic: Collision Resolution**
**What in that subtopic exactly: Definition of a Collision**
**Difficulty: m**

**Question 3**
Which of the following techniques is used to resolve collisions in a hash table?
a. Linear Probing
b. Bubble Sort
c. Binary Search
d. Recursive Function

**Correct answer: a. Linear Probing**
**Subtopic: Collision Resolution**
**What in that subtopic exactly: Linear Probing Technique**
**Difficulty: m**

**Question 4**
What is the time complexity of searching for an element in a hash table with chaining, assuming the hash function is good and the table is not too full?
a. O(1)
b. O(log n)
c. O(n)
d. O(n^2)

**Correct answer: a. O(1)**
**Subtopic: Hash Table Operations**
**What in that subtopic exactly: Time Complexity of Search Operation**
**Difficulty: h**

**Question 5**
Suppose we have a hash table with open addressing and a load factor of 0.7. If the table has 100 slots, how many keys can it hold before we need to resize it?
a. 50
b. 70
c. 100
d. 140

**Correct answer: b. 70**
**Subtopic: Hash Table Operations**
**What in that subtopic exactly: Load Factor and Resizing**
**Difficulty: h**
Here are 5 multiple choice questions on 1_Foundations of Data Structures under Recursion and Backtracking: Problem-Solving with Recursive Calls:

**Question 1**
What is the basic idea behind recursion?
a. To use loops to solve a problem
b. To break down a problem into smaller sub-problems
c. To use dynamic programming to solve a problem
d. To use iteration to solve a problem

**Correct answer: b. To break down a problem into smaller sub-problems**
**Subtopic: Introduction to Recursion**
**What in that subtopic exactly: Definition of Recursion**
**Difficulty: e**

**Question 2**
What is the base case in a recursive function?
a. The general case that solves the problem
b. The simplest case that can be solved directly
c. The case that calls the recursive function
d. The case that returns the final result

**Correct answer: b. The simplest case that can be solved directly**
**Subtopic: Recursive Functions**
**What in that subtopic exactly: Base Case and Recursive Case**
**Difficulty: m**

**Question 3**
How do you prevent a recursive function from causing a stack overflow?
a. By using a loop instead of recursion
b. By using memoization to store results
c. By defining a base case that stops the recursion
d. By increasing the stack size

**Correct answer: c. By defining a base case that stops the recursion**
**Subtopic: Recursive Functions**
**What in that subtopic exactly: Preventing Stack Overflow**
**Difficulty: m**

**Question 4**
What is the time complexity of a recursive function that calls itself n times?
a. O(log n)
b. O(n)
c. O(n^2)
d. O(2^n)

**Correct answer: d. O(2^n)**
**Subtopic: Analysis of Recursive Algorithms**
**What in that subtopic exactly: Time Complexity of Recursive Functions**
**Difficulty: h**

**Question 5**
Consider the following recursive function: `int factorial(int n) { if (n == 0) return 1; else return n * factorial(n-1); }`. What is the value of `factorial(3)`?
a. 4
b. 6
c. 5
d. 3

**Correct answer: b. 6**
**Subtopic: Recursive Functions**
**What in that subtopic exactly: Evaluating Recursive Functions**
**Difficulty: h**
