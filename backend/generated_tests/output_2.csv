Question,Option A,Option B,Option C,Option D,Correct Option,Subtopic,Subtopic Detail,Difficulty
Which of the following is a characteristic of Bubble Sort?,a. It is a stable sorting algorithm.,b. It has a time complexity of O(n).,c. It uses a recursive approach.,d. It is an adaptive sorting technique.,a. It is a stable sorting algorithm.,Bubble Sort,Characteristics of Bubble Sort,e
What is the average time complexity of Insertion Sort?,a. O(n^2),b. O(n log n),c. O(n),d. O(log n),a. O(n^2),Insertion Sort,Time complexity,m
"In Merge Sort, what is the purpose of the 'merge' step?",a. To divide the array into smaller subarrays.,b. To sort the subarrays recursively.,c. To combine the sorted subarrays into a single sorted array.,d. To find the maximum element in the array.,c. To combine the sorted subarrays into a single sorted array.,Merge Sort,Merge step,m
Why is Merge Sort considered a divide-and-conquer algorithm?,a. Because it uses a recursive approach.,b. Because it divides the array into smaller subarrays and solves them recursively.,c. Because it uses a dynamic programming approach.,d. Because it has a time complexity of O(n log n).,b. Because it divides the array into smaller subarrays and solves them recursively.,Merge Sort,Divide-and-conquer concept,m
"Suppose we have an array of n elements, and we want to sort it using Merge Sort. How many recursive calls will be made in the worst case?",a. n/2,b. n,c. log(n),d. 2^n,c. log(n),Merge Sort,Recursion in Merge Sort,h
What is the time complexity of the Linear Search algorithm?,a. O(n log n),b. O(n),c. O(log n),d. O(1),b. O(n),Linear Search,Time complexity of Linear Search,e
Which of the following is a characteristic of Binary Search?,a. It can be used on unsorted lists.,b. It has a time complexity of O(n).,c. It can be used on lists of any size.,d. It is a recursive algorithm.,c. It can be used on lists of any size.,Binary Search,Characteristics of Binary Search,m
What is the condition for Binary Search to work correctly?,a. The list must be sorted in ascending order.,b. The list must be sorted in descending order.,c. The list must have an even number of elements.,d. The list must have an odd number of elements.,a. The list must be sorted in ascending order.,Binary Search,Precondition for Binary Search,m
What is the formula to calculate the midpoint in Binary Search?,a. Midpoint = (low + high) / 2,b. Midpoint = (low - high) / 2,c. Midpoint = low + (high - low) / 2,d. Midpoint = high - (high - low) / 2,a. Midpoint = (low + high) / 2,Binary Search,Midpoint calculation in Binary Search,h
"Suppose we have a list of 16 elements and we want to find an element using Binary Search. If the element is not found in the list, what will be the number of comparisons made by the algorithm?",a. 4,b. 5,c. 3,d. 2,b. 5,Binary Search,Analysis of Binary Search,h
Which of the following is a key characteristic of a Greedy Algorithm?,a. It always finds the optimal solution.,b. It makes the locally optimal choice at each step.,c. It is used to solve NP-hard problems.,d. It has a time complexity of O(n^2).,b. It makes the locally optimal choice at each step.,Characteristics of Greedy Algorithm,Definition of Greedy Algorithm,e
What is the main difference between a Greedy Algorithm and a Dynamic Programming Algorithm?,"a. Greedy algorithms are faster, while dynamic programming algorithms are more accurate.","b. Greedy algorithms make local choices, while dynamic programming algorithms make global choices.","c. Greedy algorithms are used for sorting, while dynamic programming algorithms are used for searching.","d. Greedy algorithms are used for solving LP problems, while dynamic programming algorithms are used for solving NP-hard problems.","b. Greedy algorithms make local choices, while dynamic programming algorithms make global choices.",Comparison of Greedy and Dynamic Programming,Key differences between Greedy and Dynamic Programming,m
Which of the following problems can be solved using the Greedy Algorithm?,a. 0/1 Knapsack Problem,b. Traveling Salesman Problem,c. Longest Common Subsequence Problem,d. All of the above,a. 0/1 Knapsack Problem,Applications of Greedy Algorithm,Examples of problems solvable by Greedy Algorithm,m
A Greedy Algorithm is said to have a greedy choice property if:,a. The optimal solution can be constructed by making locally optimal choices.,b. The algorithm always finds the optimal solution.,c. The algorithm has a time complexity of O(n).,d. The algorithm is used to solve dynamic programming problems.,a. The optimal solution can be constructed by making locally optimal choices.,Conditions for Greedy Algorithm,Greedy choice property,h
Prove that the activities selected by the Greedy Algorithm for the activity selection problem are optimal.,a. By using mathematical induction to show that the greedy choice is always optimal.,b. By using a proof by contradiction to show that the greedy choice is never optimal.,c. By showing that the greedy choice has a time complexity of O(n^2).,d. By using dynamic programming to find the optimal solution.,a. By using mathematical induction to show that the greedy choice is always optimal.,Analysis of Greedy Algorithm,Proof of optimality of Greedy Algorithm,h
What is the main goal of Dynamic Programming?,a. To reduce the time complexity of a problem,b. To increase the time complexity of a problem,c. To simplify the problem,d. To make the problem more complex,a. To reduce the time complexity of a problem,Introduction to Dynamic Programming,Purpose of Dynamic Programming,e
Which of the following problems is an example of Dynamic Programming?,a. Fibonacci Sequence,b. Binary Search,c. Merge Sort,d. Quick Sort,a. Fibonacci Sequence,Examples of Dynamic Programming,Problems that use Dynamic Programming,m
What is the term used to describe the technique of breaking down a problem into smaller sub-problems in Dynamic Programming?,a. Memoization,b. Tabulation,c. Overlapping Subproblems,d. Optimal Substructure,d. Optimal Substructure,Dynamic Programming Techniques,Problem Decomposition,m
Consider a Dynamic Programming problem with a recurrence relation T(n) = 2T(n/2) + O(n). What is the time complexity of this problem?,a. O(n log n),b. O(n^2),c. O(2^n),d. O(n),a. O(n log n),Dynamic Programming Analysis,Time Complexity Analysis,h
Which of the following statements is true about the longest common subsequence problem?,a. It is a classic example of a Dynamic Programming problem.,b. It can be solved using a greedy approach.,c. It has a polynomial time complexity.,d. It is an NP-complete problem.,a. It is a classic example of a Dynamic Programming problem.,Dynamic Programming Applications,LCS Problem Characteristics,h
What is the purpose of topological sorting in a directed acyclic graph (DAG)?,a. To find the shortest path between two nodes.,b. To detect cycles in the graph.,"c. To order nodes such that for every edge (u,v), node u comes before node v.",d. To find the minimum spanning tree.,"c. To order nodes such that for every edge (u,v), node u comes before node v.",Topological Sorting,Definition of Topological Sorting,e
Which of the following graph traversal algorithms is guaranteed to visit every node in an undirected graph?,a. Depth-First Search (DFS),b. Breadth-First Search (BFS),c. Topological Sorting,d. Dijkstra's Algorithm,a. Depth-First Search (DFS),Graph Traversal,Properties of DFS,m
What is the time complexity of Dijkstra's algorithm when implemented using a binary heap?,a. O(E + V log V),b. O(E + V^2),c. O(E + V),d. O(E log V),a. O(E + V log V),Dijkstra's Algorithm,Time Complexity of Dijkstra's Algorithm,m
Which of the following statements is true about Bellman-Ford algorithm?,a. It can handle negative weight edges but not negative cycles.,b. It can handle negative cycles but not negative weight edges.,c. It can handle both negative weight edges and negative cycles.,d. It cannot handle either negative weight edges or negative cycles.,a. It can handle negative weight edges but not negative cycles.,Bellman-Ford Algorithm,Properties of Bellman-Ford Algorithm,h
"What is the purpose of the ""relax"" operation in Bellman-Ford algorithm?",a. To update the distance to a node if a shorter path is found.,b. To detect negative weight cycles in the graph.,c. To mark all nodes as unvisited.,d. To initialize the distance to all nodes as infinity.,a. To update the distance to a node if a shorter path is found.,Bellman-Ford Algorithm,Relax Operation in Bellman-Ford Algorithm,h
