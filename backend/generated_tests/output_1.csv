Question,Option A,Option B,Option C,Option D,Correct Option,Subtopic,Subtopic Detail,Difficulty
What is the purpose of time complexity analysis in algorithms?,To measure the space required by an algorithm.,To determine the best-case scenario of an algorithm.,To evaluate the performance of an algorithm.,To compare the efficiency of different algorithms.,To compare the efficiency of different algorithms.,Time Complexity,Definition and Purpose of Time Complexity,e
What does the Big O notation represent in time complexity analysis?,The average case scenario of an algorithm.,The worst-case scenario of an algorithm.,The best-case scenario of an algorithm.,The exact number of operations performed by an algorithm.,The worst-case scenario of an algorithm.,Big O Notation,Definition and Representation,m
A certain algorithm has a time complexity of O(n^2). What happens to the running time if the input size is quadrupled?,The running time increases by a factor of 4.,The running time increases by a factor of 16.,The running time increases by a factor of 8.,The running time remains unchanged.,The running time increases by a factor of 16.,Time Complexity,Implications of Quadrupling Input Size,m
"Consider two algorithms, Algorithm A with a time complexity of O(n) and Algorithm B with a time complexity of O(log n). Which algorithm will have a faster running time for large inputs?",Algorithm A,Algorithm B,Both algorithms will have the same running time.,It depends on the specific inputs.,Algorithm B,Time Complexity Comparison,Comparing Running Times,h
Suppose an algorithm has a time complexity of O(2^n). What is the approximate running time if the input size is increased from 10 to 20?,The running time increases by a factor of 2^10.,The running time increases by a factor of 1024.,The running time increases by a factor of 2^20.,The running time remains unchanged.,The running time increases by a factor of 1024.,Exponential Time Complexity,Implications of Exponential Growth,h
"What is the basic data structure that stores a collection of elements, each identified by an array index or key?",Linked List,Array,Stack,Queue,Array,Arrays,Definition of Array,e
What is the time complexity of accessing an element in an array by its index?,O(n),O(log n),O(1),O(n^2),O(1),Arrays,Time Complexity of Array Operations,m
"In a linked list, what is the primary purpose of the ""next"" pointer?",To store the data element,To point to the previous node,To point to the next node,To store the index of the node,To point to the next node,Linked Lists,Structure of a Linked List Node,m
What is the primary advantage of using a linked list over an array when frequent insertions and deletions are required?,Faster access time,More efficient use of memory,Easier implementation of algorithms,Dynamic size allocation,Dynamic size allocation,Linked Lists vs Arrays,Advantages of Linked Lists,h
"Suppose we have a linked list with n nodes, and we want to insert a new node at the k-th position. What is the time complexity of this operation in the worst case?",O(k),O(n),O(n-k),O(n+k),O(n),Linked Lists,Time Complexity of Linked List Operations,h
What is the primary purpose of a queue data structure?,To store data in a random order.,To implement recursion.,To follow the FIFO (First-In-First-Out) principle.,To search for a specific element.,To follow the FIFO (First-In-First-Out) principle.,Queue,Definition of a Queue,e
Which operation is not performed on a stack?,Push,Pop,Traverse,Sort,Sort,Stack Operations,Basic Stack Operations,m
What is the time complexity of the enqueue operation in a queue implemented using a linked list?,O(1),O(n),O(log n),O(n^2),O(1),Queue Implementation,Time Complexity of Enqueue Operation,m
"Suppose we have a stack of integers, and we want to find the maximum element in the stack. Which of the following approaches is most efficient?",Pop each element from the stack and compare it with the current maximum.,Iterate through the stack from top to bottom.,Use a recursive function to find the maximum element.,Use a secondary stack to store the maximum elements.,Pop each element from the stack and compare it with the current maximum.,Stack Applications,Finding Maximum Element in a Stack,h
Consider a queue implemented using a circular array of size n. What is the condition for checking if the queue is full?,(rear+1)%n == front,rear == front,(rear+1)%n == (front-1)%n,rear == (front+1)%n,(rear+1)%n == front,Queue Implementation,Checking if Queue is Full in Circular Array,h
What is the primary purpose of a hash function in a hash table?,To store data in the table,To retrieve data from the table,To map a key to an index in the table,To sort data in the table,To map a key to an index in the table,Hash Functions,Definition and Purpose of Hash Functions,e
Which of the following is a common technique used to handle collisions in a hash table?,Chaining,Open Addressing,Bubble Sort,Quick Sort,Chaining,Collision Resolution,Techniques for Handling Collisions,m
What is the primary advantage of using open addressing over chaining in a hash table?,It reduces memory usage,It improves cache locality,It increases search times,It decreases insertion times,It improves cache locality,Open Addressing,Advantages of Open Addressing,m
Consider a hash table with a load factor of 0.8. Which of the following statements is true?,The table is underfull,The table is at maximum capacity,The table is experiencing collisions,The table is 80% empty,The table is experiencing collisions,Load Factor and Resizing,Load Factor and Collision Rate,h
Suppose a hash function is designed such that it uses the ASCII values of the characters in a string to compute the hash code. What is a potential problem with this approach?,It is prone to collisions,It is not platform-independent,It is sensitive to string length,It is sensitive to character order,It is prone to collisions,Hash Function Design,Pitfalls in Hash Function Design,h
What is the basic idea behind recursion?,Breaking down a problem into smaller sub-problems.,Solving a problem using a loop.,Using a data structure to store results.,Avoiding function calls.,Breaking down a problem into smaller sub-problems.,Recursion Basics,Definition of Recursion,e
Which of the following is a requirement for a recursive function?,The function must have multiple parameters.,The function must have a loop.,The function must have a base case.,The function must return a value.,The function must have a base case.,Recursive Functions,Characteristics of Recursive Functions,m
What is the term for the process of returning from a recursive function call?,Invocation,Termination,Unwinding,Iteration,Unwinding,Recursive Function Calls,Recursive Function Call Process,m
Which of the following data structures is commonly used to implement backtracking algorithms?,Stacks,Queues,Trees,Graphs,Stacks,Backtracking Algorithms,Implementing Backtracking Algorithms,h
"What is the purpose of the ""unchoosing"" step in a backtracking algorithm?",To undo the last choice made.,To make a new choice.,To store the solution.,To terminate the algorithm.,To undo the last choice made.,Backtracking Algorithms,Unchoosing in Backtracking Algorithms,h
