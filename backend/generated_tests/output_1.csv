Question,Option A,Option B,Option C,Option D,Correct Option,Subtopic,Subtopic Detail,Difficulty
What is the objective of time complexity analysis?,To measure the amount of memory used by an algorithm.,To compare the efficiency of different algorithms.,To determine the best data structure for an application.,To predict the exact time taken by an algorithm.,To compare the efficiency of different algorithms.,Time Complexity Analysis,Purpose of Time Complexity Analysis,e
What is the time complexity of the following loop: for(i=0; i<n; i++) {for(j=0; j<n; j++) {...}},O(n),O(n^2),O(2^n),O(n^3),O(n^2),Time Complexity Analysis,Analyzing Nested Loops,m
Suppose we have an algorithm with a time complexity of O(n^2) and a space complexity of O(1). What can we say about the algorithm?,It uses a lot of extra memory as the input size increases.,The time taken increases linearly with the input size.,The algorithm is efficient even for large inputs.,The time taken remains constant even for large inputs.,The algorithm is efficient even for large inputs.,Space Complexity Analysis,Analyzing Trade-offs between Time and Space Complexity,m
What is the time complexity of the following recursive function: T(n) = 2T(n/2) + O(1)?,O(n),O(log n),O(n log n),O(2^n),O(n log n),Time Complexity Analysis of Recursive Functions,Master Theorem,h
Suppose we have a recursive algorithm with a time complexity of T(n) = T(n-1) + O(1). How does the time complexity of this algorithm change as the input size increases?,The time complexity increases exponentially with the input size.,The time complexity increases linearly with the input size.,The time complexity decreases exponentially with the input size.,The time complexity remains constant even for large inputs.,The time complexity increases exponentially with the input size.,Time Complexity Analysis of Recursive Functions,Analyzing Recursive Functions with Exponential Time Complexity,h
What is the primary way to access elements in an array?,Using a pointer,Using an index,Using a reference,Using a key,Using an index,Arrays,Accessing Elements in an Array,e
What is the time complexity of accessing an element in an array?,O(n),O(log n),O(1),O(n^2),O(1),Arrays,Time Complexity of Array Operations,m
What is the primary advantage of using a linked list over an array?,Faster access time,Better cache performance,Dynamic memory allocation,Easier implementation,Dynamic memory allocation,Linked Lists,Advantages of Linked Lists,m
What is the time complexity of inserting an element at the beginning of a singly linked list?,O(n),O(log n),O(1),O(n^2),O(1),Linked Lists,Time Complexity of Linked List Operations,m
"Suppose we have a linked list with nodes of size k, and we want to merge two sorted linked lists. What is the time complexity of this operation?",O(k),O(n),O(n log k),O(n/k),O(n),Linked Lists,Merging Sorted Linked Lists,h
What is the primary purpose of a stack data structure?,To store data in a random order.,To store and retrieve data in a Last-In-First-Out (LIFO) manner.,To sort data in ascending order.,To search for a specific data element.,To store and retrieve data in a Last-In-First-Out (LIFO) manner.,Stacks,Definition and Purpose of Stacks,e
What is the advantage of using a queue data structure over a stack?,It allows for faster insertion and deletion operations.,It provides more flexibility in data retrieval.,It uses less memory space.,It allows for random access to elements.,It provides more flexibility in data retrieval.,Queues vs. Stacks,Differences between Queues and Stacks,m
"In a queue implementation using an array, what is the purpose of the 'rear' variable?",To keep track of the front element of the queue.,To indicate the empty space at the end of the queue.,To point to the next available position for insertion.,To store the size of the queue.,To point to the next available position for insertion.,Array Implementation of Queues,Queue Variables and Their Roles,m
Consider a scenario where you need to implement a undo/redo feature in a text editor. Which data structure would be most suitable for this purpose?,Stack,Queue,Linked List,Binary Tree,Stack,Real-World Applications of Stacks,Using Stacks for Undo/Redo Operations,h
"Suppose you have a stack implementation with the following operations: push(x), pop(), isEmpty(), andpeek(). Which operation has a time complexity of O(1)?",push(x),pop(),peek(),All of the above,All of the above,Time and Space Complexity of Stack Operations,Analysis of Stack Operations,h
What is the main purpose of a hash function in a hash table?,To store data in a linear array.,To search for a specific data element.,To map a key to a specific index.,To sort data in ascending order.,To map a key to a specific index.,Hash Functions,Definition of Hash Function,e
Which of the following is a characteristic of a good hash function?,It always generates the same index for different keys.,It generates a fixed-size output.,It is slow and inefficient.,It only works for integer keys.,It generates a fixed-size output.,Hash Functions,Properties of Good Hash Function,m
What is the term for the process of resolving collisions in a hash table?,Hashing,Colliding,Chaining,Indexing,Chaining,Collision Resolution,Methods of Collision Resolution,m
Suppose we have a hash table with a load factor of 0.8. What can we conclude about the table?,The table is full and cannot accept more elements.,The table is empty and no elements have been inserted.,The table has 80% of its slots occupied.,The table has 80% of its slots empty.,The table has 80% of its slots occupied.,Hash Table Operations,Load Factor and its Implications,h
"Consider a hash table with open addressing and linear probing. If the table has a size of 10 and we insert 5 elements with keys 0, 1, 2, 3, and 4, what is the probability that the next element with key 5 will collide with an existing element?",0.1,0.5,0.7,1.0,0.5,Collision Resolution,Analysis of Open Addressing with Linear Probing,h
What is a recursive function?,A function that takes two inputs.,A function that calls itself.,A function that never ends.,A function that returns a pointer.,A function that calls itself.,Basics of Recursion,Definition of Recursion,e
"In a recursive function, what is the role of the base case?",To make the recursive call.,To calculate the result.,To stop the recursion.,To optimize the function.,To stop the recursion.,Basics of Recursion,Base Case in Recursion,m
Consider a recursive function that calculates the factorial of a number. What will happen if the base case is not defined?,The function will return 1.,The function will return 0.,The function will go into an infinite loop.,The function will optimize itself.,The function will go into an infinite loop.,Basics of Recursion,Importance of Base Case,m
What is the time complexity of a recursive function that calculates the Fibonacci sequence?,O(n^2),O(2^n),O(n log n),O(n),O(2^n),Analysis of Recursive Functions,Time Complexity of Recursive Functions,h
Consider a recursive function that solves the N-Queens problem using backtracking. What is the purpose of backtracking in this context?,To optimize the function.,To find the first solution.,To explore all possible solutions and then backtrack to find the correct one.,To stop the recursion.,To explore all possible solutions and then backtrack to find the correct one.,Backtracking,Purpose of Backtracking in N-Queens Problem,h
